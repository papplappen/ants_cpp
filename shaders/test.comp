#version 430
layout(local_size_x = 1, local_size_y = 1) in;

const float ANT_COMPSHADER_INT_SCALE = 1000.0;

struct Ant {
    vec2 pos;
    vec2 dir;
};

restrict uniform layout(binding = 0, rgba32f) image2D signal_map;

restrict layout(std430, binding = 3) buffer _ssbo_newdirs {
    ivec2 newdirs[];
};

restrict layout(std430, binding = 4) buffer _ssbo_ants {
    Ant ants[];
};

void main() {
    uint index = gl_WorkGroupID.x;
    ivec2 imgSize = imageSize(signal_map);
    ivec2 imgCoord = ivec2(ants[index].pos);
    imgCoord = ivec2(imgCoord.x % imgSize.x, imgCoord.y % imgSize.y);
    // float angle = 0.3 + imageLoad(signal_map, imgCoord).r;
    // vec2 newdir = normalize(vec2(ants[index].pos.y, -ants[index].pos.x));
    float px00 = imageLoad(signal_map, imgCoord).r;
    float px10 = imageLoad(signal_map, imgCoord + ivec2(8, 0)).r;
    float px01 = imageLoad(signal_map, imgCoord + ivec2(0, 8)).r;
    vec2 gradient = vec2(px10 - px00, px01 - px00);
    vec2 newdir = normalize(vec2(gradient.y, -gradient.x));
    // vec2 newdir = normalize(-gradient);
    // vec2 newdir = vec2(imgSize);
    // vec2 newdir = vec2(1,1.5);
    atomicAdd(newdirs[index].x, int(ANT_COMPSHADER_INT_SCALE * newdir.x));
    atomicAdd(newdirs[index].y, int(ANT_COMPSHADER_INT_SCALE * newdir.y));
}